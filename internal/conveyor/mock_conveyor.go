// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dmad1989/gophermart/internal/conveyor (interfaces: DB,Client)

// Package conveyor is a generated GoMock package.
package conveyor

import (
	context "context"
	reflect "reflect"

	jsonobject "github.com/dmad1989/gophermart/internal/jsonobject"
	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// GetOrdersForCalc mocks base method.
func (m *MockDB) GetOrdersForCalc(arg0 context.Context) (jsonobject.OrdersCalc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersForCalc", arg0)
	ret0, _ := ret[0].(jsonobject.OrdersCalc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersForCalc indicates an expected call of GetOrdersForCalc.
func (mr *MockDBMockRecorder) GetOrdersForCalc(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersForCalc", reflect.TypeOf((*MockDB)(nil).GetOrdersForCalc), arg0)
}

// UpdateOrders mocks base method.
func (m *MockDB) UpdateOrders(arg0 context.Context, arg1 jsonobject.OrdersCalc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrders", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrders indicates an expected call of UpdateOrders.
func (mr *MockDBMockRecorder) UpdateOrders(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrders", reflect.TypeOf((*MockDB)(nil).UpdateOrders), arg0, arg1)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// DoRequestAccrual mocks base method.
func (m *MockClient) DoRequestAccrual(arg0 context.Context, arg1 int) (jsonobject.AccrualResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoRequestAccrual", arg0, arg1)
	ret0, _ := ret[0].(jsonobject.AccrualResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoRequestAccrual indicates an expected call of DoRequestAccrual.
func (mr *MockClientMockRecorder) DoRequestAccrual(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoRequestAccrual", reflect.TypeOf((*MockClient)(nil).DoRequestAccrual), arg0, arg1)
}
